@using System.Diagnostics
@using TypicalTypist.Models
@using TypicalTypist.Services

@page "/"

@inject WordService wordService
@inject IJSRuntime JSRuntime
@inject UserService userService
@inject UserStatService userStatsService

@* Start HTML *@

<PageTitle>Home</PageTitle>

<div class="home-full-page-container">
    <div class="@(zenToggle ? "zen" : "settings-bar")">

        <span class="@(!capsToggle ? "settings-text" : "settings-text-active")" @onclick="ToggleCaps">
            <i class="bi bi-alphabet-uppercase settings-icon"></i>&nbsp;&nbsp;caps
        </span>

        <span><i class="bi bi-three-dots-vertical settings-divider"></i></span>

        <span class="@(!numToggle ? "settings-text" : "settings-text-active")" @onclick="ToggleNums">
            <i class="bi bi-123 settings-icon"></i>&nbsp;&nbsp;numbers
        </span>

        <span><i class="bi bi-three-dots-vertical settings-divider"></i></span>

        <span class="@(!symbolToggle ? "settings-text" : "settings-text-active")" @onclick="ToggleSymbols">
            <i class="bi bi-question settings-icon"></i>&nbsp;symbols
        </span>

        <span><i class="bi bi-three-dots-vertical settings-divider"></i></span>

        <span class="@(!chaosToggle ? "settings-text" : "settings-text-active")" @onclick="ToggleChaos">
            <i class="bi bi-tornado settings-icons-fire"></i>&nbsp;&nbsp;chaotic
        </span>

        <span><i class="bi bi-three-dots-vertical settings-divider"></i></span>

        <span class="@(!zenToggle ? "settings-text" : "settings-text-active")" @onclick="ToggleZen">
            <i class="bi bi-tropical-storm settings-icons-fire"></i>&nbsp;&nbsp;zen
        </span>

        <span><i class="bi bi-grip-vertical settings-divider"></i></span>

        <span class="@(!twentyfiveToggle ? "settings-text-plain" : "settings-text-plain-active")" @onclick="ToggleTwentyfive">
            &nbsp;25
        </span>

        <span class="@(!fiftyToggle ? "settings-text-plain" : "settings-text-plain-active")" @onclick="ToggleFifty">
            &nbsp;50
        </span>

        <span class="@(!seventyfiveToggle ? "settings-text-plain" : "settings-text-plain-active")" @onclick="ToggleSeventyfive">
            &nbsp;75
        </span>

        <span class="@(!onehundredToggle ? "settings-text-plain" : "settings-text-plain-active")" @onclick="ToggleOnehundred">
            &nbsp;100
        </span>

    </div>
    <div class="@(
        isCollapsed 
            ? (zenToggle ? "stats-section-no-border zen" : "stats-section-no-border") 
            : (zenToggle ? "stats-section zen" : "stats-section")
    )">
        <button class="btn-plain-text"
            type="button"
            data-bs-toggle="collapse"
            data-bs-target="#scoreSpan" 
            aria-expanded="true"
            aria-controls="scoreSpan"
            @onclick="ToggleOnCollapse"
            >
            @elapsedTime
        </button>
        <div class="collapse show" id="scoreSpan">
            <Stats_Bar Title="Overall" Accuracy="totalAccuracy" Speed="totalSpeed" currRoundCount="roundCount"></Stats_Bar>
            <Stats_Bar Title="Previous" Accuracy="prevAccuracy" Speed="prevSpeed"></Stats_Bar>
            <Stats_Bar Title="Current" Accuracy="accuracy" Speed="speed"></Stats_Bar>
        </div>
    </div>

    <div class="typing-container">
        <div @ref="textInput"
        tabindex="0"
        @onkeyup="OnInput"
        @onfocus="OnFocus"
        @onblur="OnBlur"
        class="@(!isFocused ? "blurred" : "") no-focus-visible"
        >
        @if (testInstance?.Any() == true && correctStatus.Count > 0)
        {
            @foreach (var tuple in testInstance.Select((word, index) => (word, index)))
            {
                <span class="word">
                    @foreach (var tuple2 in tuple.word.Chars.Select((Chars, index) => (Chars, index)))
                    {
                        @if ((tuple2.index + tuple.word.StartIndex == currIndex) && isFocused && (correctStatus.Count > tuple2.index + tuple.word.StartIndex))
                        {
                            <span class="cursor"></span>
                        }
                        <span style="display: inline-block;"
                            class="@(tuple2.index + tuple.word.StartIndex < correctStatus.Count
                            ? (correctStatus[tuple2.index + tuple.word.StartIndex] == true ? "correct"
                                : (correctStatus[tuple2.index + tuple.word.StartIndex] == false ? "incorrect" : "neutral"))
                            : "neutral")">
                            @tuple2.Chars
                        </span>
                    }
                </span>
                @if (tuple.index < testInstance.Count() - 1)
                {
                    <span
                        class="space @(correctStatus[tuple.word.StartIndex + tuple.word.Chars.Count] == true ? "correct" 
                        : (correctStatus[tuple.word.StartIndex + tuple.word.Chars.Count] == false ? "incorrect" : "neutral"))">
                        @if (tuple.word.StartIndex + tuple.word.Chars.Count == currIndex && isFocused)
                        {
                            <span class="cursor"></span>
                        }
                        &#8901;
                    </span>
                }
            }
        }
        </div>
        @if(!isFocused){
            <div class="focus-text">
                Click Here or Push Any Key to Focus
            </div>
        }
    </div>
</div>

@code 
{
    // Variables
    // Word Lists
    private HashSet<char> legalChars = new() {'a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z',
                                              'A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z',
                                              '1','2','3','4','5','6','7','8','9', '0', '.', ',', '\'', '"', '?', '!', '*', '=', '+', '-', '/', '\\', '<', 
                                              '>', '(', ')', '{', '}', '[', ']', '^', '~', '%', '$', '#', '@', '`', '&', '|', ' '};    
    private List<WordTestObject> testInstance = new();
    private List<CharChecker> charsTypedList = new();
    private List<char> currTestKey = new();

    // Stat Lists
    private List<BigraphData> bigraphDataList = new();
    private List<UserBigraphStatDTO> bigraphStats = new();
    private List<UserKeyStatDTO> keyStats = new();
    private UserStatDTO userStats = new(); 

    // Correct Status
    private List<bool?> correctStatus = new List<bool?>();
    private bool correct = false;

    // Key Counters
    private int includedKeysPressed = 0;
    private int correctKeys = 0;
    private int totalKeysPressed = 0;

    // Timer
    private Stopwatch stopwatch = new Stopwatch();
    private Task? timerTask;
    private CancellationTokenSource? cancellationTokenSource;
    private double accurateTime;
    private int elapsedTime;

    // Calcs
    List<decimal> accuracyList = [];
    List<decimal> speedList = [];
    decimal speed = 0;
    decimal accuracy = 0;
    decimal prevAccuracy = 0;
    decimal prevSpeed = 0;
    decimal totalAccuracy = 0;
    decimal totalSpeed = 0;
    int roundCount = 0;

    // Settings
    private bool capsToggle = false;
    private bool numToggle = false;
    private bool symbolToggle = false;
    private bool chaosToggle = false;
    private bool zenToggle = false;
    private bool twentyfiveToggle = false;
    private bool fiftyToggle = true;
    private bool seventyfiveToggle = false;
    private bool onehundredToggle = false;
    private bool isSwitchingSettings = false;
    private int testSize = 50;

    // Other
    private ElementReference textInput;
    private DotNetObjectReference<Home>? dotNetRef;
    private UserTypingTestDTO previousTest = new();
    private int currIndex = 0;
    private bool isFocused = true;
    private char userLetter;
    private char currChar;
    private char prevChar;
    private bool backspacePush = false;
    private int backspaceCounter = 0;
    private int backspaceTotalCount = 0;
    private bool isActiveSession = false;
    private bool isCollapsed = false;
    
    // Lifecycle Methods
    protected override void OnInitialized() 
    {
        JSRuntime.InvokeVoidAsync("scrollTypingContainer");
        dotNetRef = DotNetObjectReference.Create(this);
    }

    protected override async Task OnInitializedAsync()
    {
        // Get first test instance and instantiate our currTestKey var
        testInstance = await wordService.GetRandomWordsTest(testSize);

        if(testInstance.Count > 0)
        {
            ProcessCheckTestInstance();
        }

        StateHasChanged();
    } 

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender) {
            await JSRuntime.InvokeVoidAsync("addSpacePreventListener");
            await textInput.FocusAsync();
        }
    }

    // Methods
    // Timer
    private void StartTimer()
    {
        if (!stopwatch.IsRunning)
        {
            stopwatch.Start();
            cancellationTokenSource = new CancellationTokenSource();
            timerTask = UpdateTimerAsync(cancellationTokenSource.Token);
        }
    }

    private async Task UpdateTimerAsync(CancellationToken cancellationToken)
    {
        while (!cancellationToken.IsCancellationRequested)
        {
            accurateTime = stopwatch.Elapsed.TotalSeconds;
            elapsedTime = (int)stopwatch.Elapsed.TotalSeconds;

            await InvokeAsync(StateHasChanged);

            await Task.Delay(1000, cancellationToken);
        }
    }

    private void PauseTimer()
    {
        if (stopwatch.IsRunning)
        {
            cancellationTokenSource?.Cancel();
            stopwatch.Stop();
        }
    }

    private void ResumeTimer()
    {
        if (!stopwatch.IsRunning)
        {
            stopwatch.Start();
            cancellationTokenSource = new CancellationTokenSource();
            timerTask = UpdateTimerAsync(cancellationTokenSource.Token);
        }
    }

    private void ResetTimer()
    {
        if(!stopwatch.IsRunning)
        {
            stopwatch.Reset();
        }
    }

    // Handling Focus / Blur
    private async Task OnBlur()
    {
        PauseTimer();
        await Task.Delay(100);
        if(!isSwitchingSettings)
        {
            isFocused = false;
            await JSRuntime.InvokeVoidAsync("addGlobalKeyListener", dotNetRef);
        }
    }

    private async Task OnFocus()
    {
        isFocused = true;
        if(isActiveSession)
        {
            ResumeTimer();
        }
        await JSRuntime.InvokeVoidAsync("removeGlobalKeyListener", dotNetRef);
    }

    [JSInvokable("OnKeyUp")]
    public void OnKeyUp()
    {
        textInput.FocusAsync();
    }

    public async ValueTask DisposeAsync()
    {
        await JSRuntime.InvokeVoidAsync("removeGlobalKeyListener");
        await JSRuntime.InvokeVoidAsync("removeEscKeyListener");
        dotNetRef?.Dispose();
    }

    // Handling Input
    private void OnInput(KeyboardEventArgs e)
    {
        char lastTypedChar = e.Key.Length == 1 ? e.Key[0] : '\0';
        userLetter = lastTypedChar;

        if(legalChars.Contains(userLetter)) 
        {
            StartTimer();

            if(!isActiveSession)
            {
                isActiveSession = true;
            }
        }

        if(backspacePush == true)
        {
            backspacePush = false;
        }

        

        // Keep count of non-alphabetical characters outside of space, shift, and backspace
        if (e.Key == "Backspace")
        {
            if(currIndex > 0)
            {
                currIndex--;
                backspaceCounter++;
                backspaceTotalCount++;
            }
            correctStatus[currIndex] = null;
            backspacePush = true;
        }

        // Handle alphabetical keys & space
        else if(legalChars.Contains(lastTypedChar))
        {
            includedKeysPressed++;

            if (currIndex < currTestKey.Count - 1)
            {
                currIndex++;
            }

            if (currIndex < correctStatus.Count)
            {
                if (currChar == lastTypedChar)
                {
                    correct = true;
                    correctKeys++;
                    correctStatus[currIndex - 1] = true;
                }
                else
                {
                    correct = false;
                    correctStatus[currIndex - 1] = false;
                }
            }
            includedKeysPressed = includedKeysPressed - backspaceCounter;
            backspaceCounter = 0;
        }
        JSRuntime.InvokeVoidAsync("scrollTypingContainer");
        calcAccuracy();
        if(elapsedTime > 0) {
            calcSpeed();
        }
        GetNextChar();
    }

    private void GetNextChar()
    {
        if(backspacePush)
        {
            currChar = currTestKey[includedKeysPressed - backspaceCounter];
            Console.WriteLine("After the backspace, the new currChar is: " + currChar); 
        }
        else
        {
            if(legalChars.Contains(userLetter)) 
            {
                charsTypedList.Add(new CharChecker{Letter = currChar, Time = accurateTime, Correct = correct, PushedLetter = userLetter});
            }
            prevChar = currChar;
            currChar = currTestKey[includedKeysPressed];
            if(includedKeysPressed == currTestKey.Count - 1)
            {
                PauseTimer();
                ResetTimer();
                if(userService.IsLoggedIn)
                {
                    previousTest.UserId = userService.activeUser.UserId;
                    previousTest.CharCount = currTestKey.Count;
                    previousTest.IncorrectCount = charsTypedList.Count(c => !c.Correct);
                    previousTest.Mode = "random";
                    previousTest.Speed = speed;
                    previousTest.Accuracy = accuracy * 100;
                }
                accuracyList.Add(accuracy);
                speedList.Add(speed);
                prevAccuracy = accuracy;
                prevSpeed = speed;
                roundCount++;
                StartNewTestInstance();
            }   
        } 
    }

    private async void StartNewTestInstance() 
    {
        // Stat Calcs
        calcTotalAccuracy();
        calcTotalSpeed();

        if(userService.IsLoggedIn)
        {
            GenerateUserBigraphStatDTO();
            GenerateKeyStats();
            GenerateUserStats();
            if (await userStatsService.PostTest(previousTest) == true)
            {
                previousTest = new UserTypingTestDTO();
            }
            if (await userStatsService.PostBigraphStats(bigraphStats) == true)
            {
                bigraphStats = new List<UserBigraphStatDTO>();
            }
            if (await userStatsService.PostKeyStats(keyStats) == true)
            {
                keyStats = new List<UserKeyStatDTO>();
            }
            if (await userStatsService.PostStats(userStats) == true)
            {
                userStats = new UserStatDTO();
            }
        }
        currTestKey = new();
        charsTypedList = new();
        correctStatus = new();
        testInstance = new();
        bigraphDataList = new();
        isActiveSession = false;
        totalKeysPressed = 0;
        includedKeysPressed = 0;
        correctKeys = 0;
        currIndex = 0;
        elapsedTime = 0;
        accurateTime = 0;
        speed = 0;
        accuracy = 0;

        HandleTestInstance();
    }

    // Calculations
    private void calcAccuracy()
    {
        totalKeysPressed = includedKeysPressed + backspaceTotalCount;
        if(totalKeysPressed > 0)
        {
            accuracy = (decimal)correctKeys / (decimal)totalKeysPressed;
        }
    }

    private void calcSpeed()
    {
        decimal elapsedTimeMins = (decimal)stopwatch.Elapsed.TotalMilliseconds / 1000 / 60;
        speed = (decimal)(totalKeysPressed / 4.7) / elapsedTimeMins;
    }

    private void calcTotalAccuracy()
    {
        decimal total = 0;
        foreach(decimal acc in accuracyList)
        {
            total += acc;
        }
        totalAccuracy = (decimal)total / accuracyList.Count;
    }

    private void calcTotalSpeed()
    {
        decimal total = 0;
        foreach(decimal spd in speedList)
        {
            total += spd;
        }
        totalSpeed = total / speedList.Count;
    }

    private void ProcessCheckTestInstance() 
    {
        int totalLength = 0;

        // Handle case where user generates new test prior to finishing current test
        if(currTestKey.Count > 0)
        {
            PauseTimer();
            ResetTimer();
            currTestKey = new();
            charsTypedList = new();
            correctStatus = new();
            bigraphDataList = new();
            isActiveSession = false;
            totalKeysPressed = 0;
            includedKeysPressed = 0;
            correctKeys = 0;
            currIndex = 0;
            elapsedTime = 0;
            accurateTime = 0;
            speed = 0;
            accuracy = 0;
        }

        foreach(WordTestObject testObj in testInstance) 
        {
            foreach(char word in testObj.Chars) 
            {
                currTestKey.Add(word);
                totalLength++;
            }
            currTestKey.Add(' ');
            totalLength++;
        }

        correctStatus = new List<bool?>(Enumerable.Repeat((bool?)null, totalLength));
        currChar = currTestKey[0];
    }

    // Stat Generation Methods
    private void GenerateUserBigraphStatDTO() 
    {
        if(charsTypedList.Count >= 2)
        {
            // Fill bigraphDataList
            for(int i = charsTypedList.Count - 1; i >= 1; i--)
            {
                int incorrectCount = 0;
                int correctCount = 0;
                string newBigraph = charsTypedList[i - 1].Letter.ToString() + charsTypedList[i].Letter.ToString();
                if(charsTypedList[i - 1].Correct == false || charsTypedList[i].Correct == false)
                {
                    incorrectCount++;
                }
                else
                {
                    correctCount++;
                }
                bigraphDataList.Add(new BigraphData
                {
                    Bigraph = newBigraph,
                    Speed = (decimal)(charsTypedList[i].Time - charsTypedList[i - 1].Time),
                    IncorrectCount = incorrectCount,
                    CorrectCount = correctCount
                });
                incorrectCount = 0;
                correctCount = 0;
            }
            foreach(BigraphData data in bigraphDataList)
            {
                // Handle first instance
                if(!bigraphStats.Any(s => s.Bigraph == data.Bigraph) || bigraphStats.Count == 0)
                {
                    bigraphStats.Add(new UserBigraphStatDTO
                    {
                        UserId = userService.activeUser.UserId,
                        Bigraph = data.Bigraph,
                        Speed = data.Speed,
                        CorrCount = data.CorrectCount,
                        Accuracy = data.CorrectCount * 100,
                        Quantity = 1
                    });
                }
                // Handle all ensuing instances
                else
                {
                    int index = bigraphStats.FindIndex(s => s.Bigraph == data.Bigraph);
                    if(index >= 0)
                    {
                        bigraphStats[index].Quantity++;
                        if(data.CorrectCount == 1)
                        {
                            bigraphStats[index].CorrCount++;
                        }
                        bigraphStats[index].Speed = (bigraphStats[index].Speed + data.Speed) / bigraphStats[index].Quantity;
                        bigraphStats[index].Accuracy = ((bigraphStats[index].CorrCount) / bigraphStats[index].Quantity) * 100;
                    }
                }
            }
        }
    }

    private void GenerateKeyStats()
    {
        var frequencyMap = charsTypedList.Aggregate(new Dictionary<string, UserKeyStatFull>(), (acc, current) =>
        {
            string charKey = current.Letter.ToString();

            // Initialize key's stat if new
            if (!acc.ContainsKey(charKey))
            {
                acc[charKey] = new UserKeyStatFull
                {
                    Key = charKey,
                    Frequency = 0,
                    CorrectCount = 0,
                    TotalSpeed = 0,
                    BigraphCount = 0
                };
            }

            // Handle case where it's not new
            acc[charKey].Frequency++;
            if (current.Correct)
            {
                acc[charKey].CorrectCount++;
            }

            // Update bigraph data
            foreach (var bigraphData in bigraphDataList)
            {
                if (bigraphData.Bigraph[1].ToString() == charKey)
                {
                    acc[charKey].TotalSpeed += bigraphData.Speed;
                    acc[charKey].BigraphCount++;
                }
            }

            return acc;
        });

        // Convert frequencyMap to a list of frequency data with calculated accuracy and speed
        var frequencyArr = frequencyMap.Values.Select(charData => new
        {
            Char = charData.Key,
            Frequency = charData.Frequency,
            Accuracy = charData.Frequency > 0 ? (decimal)charData.CorrectCount / (decimal)charData.Frequency * 100 : 0,
            Speed = charData.BigraphCount > 0 ? charData.TotalSpeed / (decimal)charData.BigraphCount : 0
        }).ToList();

        // Populate keyStats with final values
        foreach (var k in frequencyArr)
        {
            keyStats.Add(new UserKeyStatDTO
            {
                UserId = userService.activeUser.UserId,
                Key = k.Char,
                TotalTyped = k.Frequency,
                Accuracy = k.Accuracy,
                Speed = k.Speed
            });
        }
    }

    private void GenerateUserStats()
    {
        userStats.UserId = userService.activeUser.UserId;
        userStats.CharsTyped = charsTypedList.Count;
        userStats.TimeTyped = elapsedTime;
        userStats.Accuracy = prevAccuracy * 100;
        userStats.WPM = prevSpeed;
    }

    // Test Settings
    // Test Mode
    private void ToggleCaps()
    {
        if(chaosToggle)
        {
            chaosToggle = false;
        }
        capsToggle = !capsToggle;
        HandleTestInstance();
    }
    
    private void ToggleNums()
    {
        if(chaosToggle)
        {
            chaosToggle = false;
        }
        numToggle = !numToggle;
        HandleTestInstance();
    }
    
    private void ToggleSymbols()
    {
        if(chaosToggle)
        {
            chaosToggle = false;
        }
        symbolToggle = !symbolToggle;
        HandleTestInstance();
    }
    
    private void ToggleChaos()
    {
        chaosToggle = !chaosToggle;
        HandleTestInstance();
    }
    
    private async void ToggleZen()
    {
        if(!zenToggle) 
        {
            isSwitchingSettings = true;
            zenToggle = true;
            await textInput.FocusAsync();
            await JSRuntime.InvokeVoidAsync("addEscKeyListener", dotNetRef);
            await Task.Delay(150);
            isSwitchingSettings = false;
        }
    }

    [JSInvokable("OnEscKeyUp")]
    public async void OnEscKeyUp()
    {
        zenToggle = false;
        await JSRuntime.InvokeVoidAsync("removeEscKeyListener", dotNetRef);
    }
    
    // Test Size
    private void ToggleTwentyfive()
    {
        if(fiftyToggle) 
        {
            fiftyToggle = false;
        }

        if(seventyfiveToggle) 
        {
            seventyfiveToggle = false;
        }

        if(onehundredToggle) 
        {
            onehundredToggle = false;
        }

        if(!twentyfiveToggle)
        {
            twentyfiveToggle = !twentyfiveToggle;
            testSize = 25;
            HandleTestInstance();
        }
    }
    
    private void ToggleFifty()
    {
        if(twentyfiveToggle) 
        {
            twentyfiveToggle = false;
        }
          
        if(seventyfiveToggle)  
        {
            seventyfiveToggle = false;
        }

        if(onehundredToggle) 
        {
            onehundredToggle = false;
        }

        if(!fiftyToggle)
        {
            fiftyToggle = !fiftyToggle;
            testSize = 50;
            HandleTestInstance();
        }
    }
    
    private void ToggleSeventyfive()
    {
        if(twentyfiveToggle) 
        {
            twentyfiveToggle = false;
        }

        if(fiftyToggle) 
        {
            fiftyToggle = false;
        }

        if(onehundredToggle) 
        {
            onehundredToggle = false;
        }

        if(!seventyfiveToggle)
        {
            seventyfiveToggle = !seventyfiveToggle;
            testSize = 75;
            HandleTestInstance();
        }
    }
    
    private void ToggleOnehundred()
    {
        if(twentyfiveToggle) 
        {
            twentyfiveToggle = false;
        }

        if(fiftyToggle) 
        {
            fiftyToggle = false;
        }

        if(seventyfiveToggle) 
        {
            seventyfiveToggle = false;
        }

        if(!onehundredToggle)
        {
            onehundredToggle = !onehundredToggle;
            testSize = 100;
            HandleTestInstance();
        }
    }
    
    // Handling Test Instance
    private async void HandleTestInstance()
    {
        isSwitchingSettings = true;
        try
        {
            List<WordTestObject> result = new();

            if (chaosToggle)
            {
                capsToggle = false;
                numToggle = false;
                symbolToggle = false;
                result = await wordService.GetChaoticTest(testSize);
            }

            else if (capsToggle)
            {
                if (symbolToggle && numToggle)
                {
                    result = await wordService.GetRandomCapsNumsAndSymbolsTest(testSize);
                }

                else if (symbolToggle) 
                {
                    result = await wordService.GetRandomCapsAndSymbolsTest(testSize);
                }

                else if (numToggle)
                {
                    result = await wordService.GetRandomCapsAndNumsTest(testSize);
                }

                else
                {
                    result = await wordService.GetRandomCapsTest(testSize);
                }
            }
            
            else if (numToggle)
            {
                if (symbolToggle) 
                {
                    result = await wordService.GetRandomWordsNumsAndSymbolsTest(testSize);
                }
                else
                {
                    result = await wordService.GetRandomWordsAndNumsTest(testSize);
                }
            }

            else if (symbolToggle)
            {
                result = await wordService.GetRandomWordsAndSymbolsTest(testSize);
            }

            else
            {
                result = await wordService.GetRandomWordsTest(testSize);
            }

            if (result != null)
            {
                await UpdateTestInstance(result);
            }
        }
        finally
        {
            await Task.Delay(100);
            isSwitchingSettings = false;
        }
    }
    
    private async Task UpdateTestInstance(List<WordTestObject> result)
    {
        testInstance = result;
        ProcessCheckTestInstance();
        StateHasChanged();
        await textInput.FocusAsync();
        await JSRuntime.InvokeVoidAsync("scrollTypingContainer");
    }

    // Other
    private async void ToggleOnCollapse()
    {
        isSwitchingSettings = true;
        isCollapsed = !isCollapsed;
        await textInput.FocusAsync();
        await Task.Delay(150);
        isSwitchingSettings = false;

    }
}
