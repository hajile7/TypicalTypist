@using TypicalTypist.Models
@using TypicalTypist.Services

@page "/"

@inject WordService wordService
@inject IJSRuntime JSRuntime


@* Start HTML *@

<PageTitle>Home</PageTitle>

<div class="typing-container">

    <div class="row-100 g-0" style="text-align: center;">
        <h3>[Timer and such here]</h3>
    </div>


    <div class="row-100 g-0" style="text-align: center; font-size: 2rem;">
        <div class="text-wrapper">
            <div class="col-8 offset-2">
                <div @ref="textInput"
                tabindex="0"
                @onkeyup="OnInput"
                class="@(!isFocused ? "blurred" : "")"
                >
            @if (testInstance?.Any() == true && correctStatus.Count > 0)
            {
                @foreach (var tuple in testInstance.Select((word, index) => (word, index)))
                {
                    <span class="word">
                        @foreach (var tuple2 in tuple.word.Chars.Select((Chars, index) => (Chars, index)))
                        {
                            @if ((tuple2.index + tuple.word.StartIndex == currIndex) && isFocused && (correctStatus.Count > tuple2.index + tuple.word.StartIndex))
                            {
                                <span class="cursor"></span>
                            }
                            <span style="display: inline-block;"
                                class="@(tuple2.index + tuple.word.StartIndex < correctStatus.Count 
                                        ? (correctStatus[tuple2.index + tuple.word.StartIndex] ? "correct" : 
                                            (correctStatus[tuple2.index + tuple.word.StartIndex] == false ? "incorrect" : "")) 
                                        : "")">
                                @tuple2.Chars
                            </span>
                        }
                    </span>
                    @if (tuple.index < testInstance.Count() - 1)
                    {
                        <span style="font-size: 1.25rem;"
                            class="@(correctStatus[tuple.word.StartIndex + tuple.word.Chars.Count] ? "correct" : 
                                    (correctStatus[tuple.word.StartIndex + tuple.word.Chars.Count] == false ? "incorrect" : ""))">
                            @if (tuple.word.StartIndex + tuple.word.Chars.Count == currIndex && isFocused)
                            {
                                <span class="cursor"></span>
                            }
                            &#8901;
                        </span>
                    }
                }
            }
        </div>
        @if (!isFocused)
        {
            <div class="focusText">
                Click Here or Push Any Key to Focus
            </div>
        }
            </div>
        </div>
    </div>
    
</div>




@code 
{
    //Variables
    private ElementReference textInput;
    private List<WordTestObject> testInstance = new();
    private List<CharChecker> charsTypedList = new();
    private List<char> checkTestInstance = new();
    private List<bool> correctStatus = new List<bool>();
    private bool correct = false;
    private int currIndex = 0;
    private bool isFocused = true;
    private char userLetter;
    private int excludedKeysPressed = 0;
    private int includedKeysPressed = 0;
    private char currChar;
    private char prevChar;
    private int correctKeys = 0;
    private HashSet<char> letters = new() {'a', 'b', 'c', 'd','e', 'f', 'g', 'h','i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r', 's','t','u','v','w','x','y','z'};
    
    //Lifecycle Methods
    protected override async Task OnInitializedAsync()
    {
        testInstance = await wordService.GetRandomTest();

        if(testInstance.Any())
        {
            ProcessCheckTestInstance();
        }
        StateHasChanged();
    } 
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender) {
            await textInput.FocusAsync();
        }
    }

    //Methods
    private void OnInput(KeyboardEventArgs e)
    {
        char lastTypedChar = e.Key.Length == 1 ? e.Key[0] : '\0';
        userLetter = lastTypedChar;
        Console.WriteLine(userLetter);

        if (!letters.Contains(lastTypedChar) && lastTypedChar != '\b' && lastTypedChar != ' ' && !e.ShiftKey)
        {
            excludedKeysPressed++;
        }

        if (letters.Contains(lastTypedChar) || lastTypedChar == ' ')
        {
            includedKeysPressed++;

            if (currIndex < checkTestInstance.Count - 1)
            {
                currIndex++;
            }

            Console.WriteLine(currIndex);
            Console.WriteLine(currChar);

            if (currIndex < correctStatus.Count)
            {
                if (currChar == '1' && lastTypedChar == ' ')
                {
                    correct = true;
                    correctKeys++;
                    correctStatus[currIndex - 1] = true;
                }
                else if (currChar == lastTypedChar)
                {
                    correct = true;
                    correctKeys++;
                    correctStatus[currIndex - 1] = true;
                }
                else
                {
                    correct = false;
                    correctStatus[currIndex - 1] = false;
                }
            }

        }
        Console.WriteLine(correct);
        GetNextChar();

    }

    private void GetNextChar()
    {
        if(letters.Contains(userLetter) || userLetter == ' ') 
        {
            charsTypedList.Add(new CharChecker{Letter = currChar, Time = 0, Correct = correct, PushedLetter = userLetter});
        }
        foreach(CharChecker check in charsTypedList)
        {
            Console.WriteLine("Check Info: ");
            Console.WriteLine(check.Letter);
            Console.WriteLine("Letter pushed: ");
            Console.WriteLine(check.PushedLetter);
            Console.WriteLine("Le correct status: ");
            Console.WriteLine(check.Correct);
        }
        prevChar = currChar;
        currChar = checkTestInstance[includedKeysPressed];
        if(includedKeysPressed == checkTestInstance.Count - 1)
        {
            StartNewTestInstance();
        }
    }

    private async void StartNewTestInstance() 
    {
        checkTestInstance = new();
        charsTypedList = new();
        correctStatus = new();
        includedKeysPressed = 0;
        excludedKeysPressed = 0;
        correctKeys = 0;
        currIndex = 0;
        testInstance = new();

        testInstance = await wordService.GetRandomTest();

        if(testInstance.Any())
        {
            ProcessCheckTestInstance();
            StateHasChanged();
        }


    }

    private void ProcessCheckTestInstance() 
    {
        int totalLength = 0;
        foreach(WordTestObject testObj in testInstance) 
        {
            foreach(char word in testObj.Chars) 
            {
                checkTestInstance.Add(word);
                totalLength++;
            }
            checkTestInstance.Add('1');
            totalLength++;
        }
        correctStatus = new List<bool>(Enumerable.Repeat(false, totalLength));
        //Check Test Instance
        Console.WriteLine(String.Join(',',checkTestInstance));
        //Set currChar
        currChar = checkTestInstance[0];

    }


}
