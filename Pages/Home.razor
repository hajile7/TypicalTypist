@using TypicalTypist.Models
@using TypicalTypist.Services

@page "/"

@inject WordService wordService
@inject IJSRuntime JSRuntime


@* Start HTML *@

<PageTitle>Home</PageTitle>

<div class="typing-container">

    <div class="row-100 g-0" style="text-align: center;">
        <h3>[Timer and such here]</h3>
    </div>


    <div class="row-100 g-0" style="text-align: left; font-size: 2rem;">
        <div class="text-wrapper">
            <div class="col-10 offset-1">
                <div @ref="textInput"
                tabindex="0"
                @onkeyup="OnInput"
                class="@(!isFocused ? "blurred" : "") noFocusVisible"
                >
                @if (testInstance?.Any() == true && correctStatus.Count > 0)
                {
                    @foreach (var tuple in testInstance.Select((word, index) => (word, index)))
                    {
                        <span class="word">
                            @foreach (var tuple2 in tuple.word.Chars.Select((Chars, index) => (Chars, index)))
                            {
                                @if ((tuple2.index + tuple.word.StartIndex == currIndex) && isFocused && (correctStatus.Count > tuple2.index + tuple.word.StartIndex))
                                {
                                    <span class="cursor"></span>
                                }
                                <span style="display: inline-block;"
                                    class="@(tuple2.index + tuple.word.StartIndex < correctStatus.Count
                                    ? (correctStatus[tuple2.index + tuple.word.StartIndex] == true ? "correct"
                                        : (correctStatus[tuple2.index + tuple.word.StartIndex] == false ? "incorrect" : "neutral"))
                                    : "neutral")">
                                    @tuple2.Chars
                                </span>
                            }
                        </span>
                        @if (tuple.index < testInstance.Count() - 1)
                        {
                            <span
                                class="@(correctStatus[tuple.word.StartIndex + tuple.word.Chars.Count] == true ? "correct" 
                                : (correctStatus[tuple.word.StartIndex + tuple.word.Chars.Count] == false ? "incorrect" : "neutral"))">
                                @if (tuple.word.StartIndex + tuple.word.Chars.Count == currIndex && isFocused)
                                {
                                    <span class="cursor"></span>
                                }
                                &#8901;
                            </span>
                        }
                    }
                }
        </div>
        @if (!isFocused)
        {
            <div class="focusText">
                Click Here or Push Any Key to Focus
            </div>
        }
            </div>
        </div>
    </div>
    
</div>


@code 
{
    // Variables
    // Word Lists
    private HashSet<char> legalChars = new() {'a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z',
                                              'A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z',
                                              '0', '1','2','3','4','5','6','7','8','9'};    private List<WordTestObject> testInstance = new();
    private List<CharChecker> charsTypedList = new();
    private List<char> checkTestInstance = new();

    // Correct Status
    private List<bool?> correctStatus = new List<bool?>();
    private bool correct = false;

    // Key Counters
    private int excludedKeysPressed = 0;
    private int includedKeysPressed = 0;
    private int correctKeys = 0;

    // Other
    private int currIndex = 0;
    private bool isFocused = true;
    private char userLetter;
    private char currChar;
    private char prevChar;
    private ElementReference textInput;
    private bool backspacePush = false;
    private int backspaceCounter = 0;
    
    //Lifecycle Methods
    protected override async Task OnInitializedAsync()
    {
        // Get first test instance and instantiate our checkTestInstance var
        testInstance = await wordService.GetRandomWordsAndNumbersTest();

        if(testInstance.Count > 0)
        {
            ProcessCheckTestInstance();
        }

        StateHasChanged();
    } 
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender) {
            await textInput.FocusAsync();
        }
    }

    //Methods
    private void OnInput(KeyboardEventArgs e)
    {
        Console.WriteLine("Current index: " + currIndex); 
        Console.WriteLine("Current character: " + currChar); 

        if(backspacePush == true)
        {
            backspacePush = false;
        }

        char lastTypedChar = e.Key.Length == 1 ? e.Key[0] : '\0';
        userLetter = lastTypedChar;

        // Keep count of non-alphabetical characters outside of space, shift, and backspace
        if (e.Key == "Backspace")
        {
            if(currIndex > 0)
            {
                currIndex--;
                backspaceCounter++;
            }
            correctStatus[currIndex] = null;
            backspacePush = true;
            Console.WriteLine("Current index is: " + currIndex);
        }

        // Handle alphabetical keys & space
        else if(legalChars.Contains(lastTypedChar) || lastTypedChar == ' ')
        {
            includedKeysPressed++;
            Console.WriteLine("IncludedKeysPressed has been incremented to: " + includedKeysPressed);

            if (currIndex < checkTestInstance.Count - 1)
            {
                currIndex++;
            }

            if (currIndex < correctStatus.Count)
            {
                if (currChar == lastTypedChar)
                {
                    correct = true;
                    correctKeys++;
                    correctStatus[currIndex - 1] = true;
                }
                else
                {
                    correct = false;
                    correctStatus[currIndex - 1] = false;
                }
            }
            includedKeysPressed = includedKeysPressed - backspaceCounter;
            backspaceCounter = 0;
        }
        GetNextChar();
    }

    private void GetNextChar()
    {
        if(backspacePush)
        {
            currChar = checkTestInstance[includedKeysPressed - backspaceCounter];
            Console.WriteLine("After the backspace, the new currChar is: " + currChar); 
        }
        else
        {
            if(legalChars.Contains(userLetter) || userLetter == ' ') 
            {
                charsTypedList.Add(new CharChecker{Letter = currChar, Time = 0, Correct = correct, PushedLetter = userLetter});
            }
            prevChar = currChar;
            currChar = checkTestInstance[includedKeysPressed];
            if(includedKeysPressed == checkTestInstance.Count - 1)
            {
                StartNewTestInstance();
            }   

        } 
    }

    private async void StartNewTestInstance() 
    {
        checkTestInstance = new();
        charsTypedList = new();
        correctStatus = new();
        includedKeysPressed = 0;
        excludedKeysPressed = 0;
        correctKeys = 0;
        currIndex = 0;
        testInstance = new();

        testInstance = await wordService.GetRandomWordsAndNumbersTest();

        if(testInstance.Any())
        {
            ProcessCheckTestInstance();
            StateHasChanged();
        }

    }

    private void ProcessCheckTestInstance() 
    {
        int totalLength = 0;
        foreach(WordTestObject testObj in testInstance) 
        {
            foreach(char word in testObj.Chars) 
            {
                checkTestInstance.Add(word);
                totalLength++;
            }
            checkTestInstance.Add(' ');
            totalLength++;
        }
        correctStatus = new List<bool?>(Enumerable.Repeat((bool?)null, totalLength));
        currChar = checkTestInstance[0];

    }


}
