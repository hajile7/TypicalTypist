@using TypicalTypist.Models;
@inject IJSRuntime JSRuntime;

@page "/test";


<div class="typing-container">
    <div @ref="textInput"
    tabindex="0"
    @onkeyup="OnInput"
    class="@(!isFocused ? "blurred" : "") no-focus-visible"
    >
    @if (testInstance?.Any() == true && correctStatus.Count > 0)
    {
        @foreach (var tuple in testInstance.Select((word, index) => (word, index)))
        {
            <span class="word">
                @foreach (var tuple2 in tuple.word.Chars.Select((Chars, index) => (Chars, index)))
                {
                    @if ((tuple2.index + tuple.word.StartIndex == currIndex) && isFocused && (correctStatus.Count > tuple2.index + tuple.word.StartIndex))
                    {
                        <span class="cursor"></span>
                    }
                    <span style="display: inline-block;"
                        class="@(tuple2.index + tuple.word.StartIndex < correctStatus.Count
                        ? (correctStatus[tuple2.index + tuple.word.StartIndex] == true ? "correct"
                            : (correctStatus[tuple2.index + tuple.word.StartIndex] == false ? "incorrect" : "neutral"))
                        : "neutral")">
                        @tuple2.Chars
                    </span>
                }
            </span>
            @if (tuple.index < testInstance.Count() - 1)
            {
                <span
                    class="@(correctStatus[tuple.word.StartIndex + tuple.word.Chars.Count] == true ? "correct" 
                    : (correctStatus[tuple.word.StartIndex + tuple.word.Chars.Count] == false ? "incorrect" : "neutral"))">
                    @if (tuple.word.StartIndex + tuple.word.Chars.Count == currIndex && isFocused)
                    {
                        <span class="cursor"></span>
                    }
                    &#8901;
                </span>
            }
        }
    }
    </div>
</div>

@code
{
    // Variables
    // Responsiveness
    private int currentRow = 0;
    private const int rowHeight = 50;

    // Word Lists
    private HashSet<char> legalChars = new() {'a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z',
                                              'A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z',
                                              '1','2','3','4','5','6','7','8','9', '.', ',', '\'', '"', '?', '!', '*', '=', '+', '-', '/', '\\', '<', 
                                              '>', '(', ')', '{', '}', '[', ']', '^', '~', '%', '$', '#', '@', '`', '&', '|'};
    private List<WordTestObject> testInstance = new List<WordTestObject>
    {
        new WordTestObject{Chars = ['t', 'i', 'g', 'e','r','s'], StartIndex = 0},
        new WordTestObject{Chars = ['t','r','a','y'], StartIndex = 7},
        new WordTestObject{Chars = ['e','l','e','m','e','n','t','s'], StartIndex = 12},
        new WordTestObject{Chars = ['e', 'x', 'a', 'm', 'i', 'n', 'e', 'e', 'r'], StartIndex = 21},
        new WordTestObject{Chars = ['c', 'l', 'e', 'a', 'r', 's'], StartIndex = 31},
        new WordTestObject{Chars = ['m', 'a', 'r', 'k'], StartIndex = 38},
        new WordTestObject{Chars = ['r','e','m','o','v','e'], StartIndex = 43},
        new WordTestObject{Chars = ['p','a','y'], StartIndex = 50},
        new WordTestObject{Chars = ['f','e','l','l','o','w'], StartIndex = 54},
        new WordTestObject{Chars = ['g','e','n','d','e','r'], StartIndex = 61},
        new WordTestObject{Chars = ['v','a','l','l','e','y'], StartIndex = 68},
        new WordTestObject{Chars = ['c','o','r','n','e','r'], StartIndex = 75},
        new WordTestObject{Chars = ['c','a','s','t','l','e'], StartIndex = 82},
        new WordTestObject{Chars = ['n','o','t'], StartIndex = 89},
        new WordTestObject{Chars = ['w','o','w'], StartIndex = 93},
        new WordTestObject{Chars = ['r','a','b','b','i','t'], StartIndex = 97},
        new WordTestObject{Chars = ['t','i','c','k','e','t'], StartIndex = 104},
        new WordTestObject{Chars = ['t','h','o','u','g','h'], StartIndex = 111},
        new WordTestObject{Chars = ['a','p','p','r','o','v','e'], StartIndex = 118},
        new WordTestObject{Chars = ['i','n','t','r','o','d','u','c','e'], StartIndex = 126},
        new WordTestObject{Chars = ['m','a','k','e'], StartIndex = 136}
    };
    private List<CharChecker> charsTypedList = new();
    private List<char> checkTestInstance = new();

    // Correct Status
    private List<bool?> correctStatus = new List<bool?>();
    private bool correct = false;

    // Key Counters
    private int excludedKeysPressed = 0;
    private int includedKeysPressed = 0;
    private int correctKeys = 0;

    // Other
    private int currIndex = 0;
    private bool isFocused = true;
    private char userLetter;
    private char currChar;
    private char prevChar;
    private ElementReference textInput;
    private bool backspacePush = false;
    private int backspaceCounter = 0;

    //Methods
    protected override void OnInitialized() 
    {
        JSRuntime.InvokeVoidAsync("scrollTypingContainer");
        ProcessCheckTestInstance();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender) {
            await JSRuntime.InvokeVoidAsync("addSpacePreventListener");
            await textInput.FocusAsync();
        }
    }

    private void OnInput(KeyboardEventArgs e)
    {
        @* Console.WriteLine("Current index: " + currIndex); 
        Console.WriteLine("Current character: " + currChar);  *@

        if(backspacePush == true)
        {
            backspacePush = false;
        }

        char lastTypedChar = e.Key.Length == 1 ? e.Key[0] : '\0';
        userLetter = lastTypedChar;

        @* Console.WriteLine("You just typed: " + lastTypedChar); *@

        // Handle backspace
        if(e.Key == "Backspace")
        {
            if(currIndex > 0)
            {
                currIndex--;
                backspaceCounter++;
            }
            correctStatus[currIndex] = null;
            backspacePush = true;
            @* Console.WriteLine("Current index is: " + currIndex); *@
        }

        // Handle alphabetical keys & space
        else if(legalChars.Contains(lastTypedChar) || lastTypedChar == ' ')
        {
            includedKeysPressed++;
            @* Console.WriteLine("IncludedKeysPressed has been incremented to: " + includedKeysPressed); *@

            if (currIndex < checkTestInstance.Count - 1)
            {
                currIndex++;
            }

            if (currIndex < correctStatus.Count)
            {
                if (currChar == lastTypedChar)
                {
                    correct = true;
                    correctKeys++;
                    correctStatus[currIndex - 1] = true;
                }
                else
                {
                    correct = false;
                    correctStatus[currIndex - 1] = false;
                }
            }
            includedKeysPressed = includedKeysPressed - backspaceCounter;
            backspaceCounter = 0;
        }
        JSRuntime.InvokeVoidAsync("scrollTypingContainer");
        GetNextChar();
    }

    private void GetNextChar()
    {
        if(backspacePush)
        {
            currChar = checkTestInstance[includedKeysPressed - backspaceCounter];
            @* Console.WriteLine("After the backspace, the new currChar is: " + currChar);  *@
        }
        else
        {
            if(legalChars.Contains(userLetter) || userLetter == ' ') 
            {
                charsTypedList.Add(new CharChecker{Letter = currChar, Time = 0, Correct = correct, PushedLetter = userLetter});
            }
            prevChar = currChar;
            currChar = checkTestInstance[includedKeysPressed];
            @* Console.WriteLine("Without backspace, the new currChar is: " + currChar); *@
        }
    }

    private void ProcessCheckTestInstance() 
    {
        int totalLength = 0;
        foreach(WordTestObject testObj in testInstance) 
        {
            foreach(char word in testObj.Chars) 
            {
                checkTestInstance.Add(word);
                totalLength++;
            }
            checkTestInstance.Add(' ');
            totalLength++;
        }
        correctStatus = new List<bool?>(Enumerable.Repeat((bool?)null, totalLength));
        //Check Test Instance
        //Console.WriteLine(String.Join(',',checkTestInstance));
        //Set currChar
        currChar = checkTestInstance[0];
    }

}