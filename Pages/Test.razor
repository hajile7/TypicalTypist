@using TypicalTypist.Models;

@page "/test";

<div class="typing-container">

    <div class="row-100 g-0" style="text-align: center; font-size: 2rem;">
        <div class="text-wrapper">
            <div class="col-8 offset-2">
                <div @ref="textInput"
                tabindex="0"
                @onkeyup="OnInput"
                class="@(!isFocused ? "blurred" : "") noFocusVisible"
                >
            @if (testInstance?.Any() == true && correctStatus.Count > 0)
            {
                @foreach (var tuple in testInstance.Select((word, index) => (word, index)))
                {
                    <span class="word">
                        @foreach (var tuple2 in tuple.word.Chars.Select((Chars, index) => (Chars, index)))
                        {
                            @if ((tuple2.index + tuple.word.StartIndex == currIndex) && isFocused && (correctStatus.Count > tuple2.index + tuple.word.StartIndex))
                            {
                                <span class="cursor"></span>
                            }
                            <span style="display: inline-block;"
                                class="@(tuple2.index + tuple.word.StartIndex < correctStatus.Count
                                ? (correctStatus[tuple2.index + tuple.word.StartIndex] == true ? "correct"
                                    : (correctStatus[tuple2.index + tuple.word.StartIndex] == false ? "incorrect" : "neutral"))
                                : "neutral")">
                                @tuple2.Chars
                            </span>
                        }
                    </span>
                    @if (tuple.index < testInstance.Count() - 1)
                    {
                        <span
                            class="@(correctStatus[tuple.word.StartIndex + tuple.word.Chars.Count] == true ? "correct" 
                            : (correctStatus[tuple.word.StartIndex + tuple.word.Chars.Count] == false ? "incorrect" : "neutral"))">
                            @if (tuple.word.StartIndex + tuple.word.Chars.Count == currIndex && isFocused)
                            {
                                <span class="cursor"></span>
                            }
                            &#8901;
                        </span>
                    }
                }
            }
        </div>
            </div>
        </div>
    </div>
    
</div>

@code
{
    // Variables
    // Word Lists
    private HashSet<char> letters = new() {'a', 'b', 'c', 'd','e', 'f', 'g', 'h','i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r', 's','t','u','v','w','x','y','z'};
    private List<WordTestObject> testInstance = new List<WordTestObject>
    {
        new WordTestObject{Chars = ['f','l','i','g','h','t'], StartIndex = 0},
        new WordTestObject{Chars = ['s','i','n','k'], StartIndex = 7},
        new WordTestObject{Chars = ['a','d','v','a','n','c','e','d'], StartIndex = 12},
        new WordTestObject{Chars = ['b','u','i','l','d','i','n','g','s'], StartIndex = 21},
        new WordTestObject{Chars = ['s','u','m','m','e','r'], StartIndex = 31},
        new WordTestObject{Chars = ['d','a','t','e'], StartIndex = 38},
        new WordTestObject{Chars = ['r','e','m','o','v','e'], StartIndex = 43},
        new WordTestObject{Chars = ['p','a','y'], StartIndex = 50},
        new WordTestObject{Chars = ['f','e','l','l','o','w'], StartIndex = 54},
        new WordTestObject{Chars = ['g','e','n','d','e','r'], StartIndex = 61},
        new WordTestObject{Chars = ['v','a','l','l','e','y'], StartIndex = 68},
        new WordTestObject{Chars = ['c','o','r','n','e','r'], StartIndex = 75},
        new WordTestObject{Chars = ['c','a','s','t','l','e'], StartIndex = 82},
        new WordTestObject{Chars = ['n','o','t'], StartIndex = 89},
        new WordTestObject{Chars = ['w','o','w'], StartIndex = 93},
        new WordTestObject{Chars = ['r','a','b','b','i','t'], StartIndex = 97},
        new WordTestObject{Chars = ['t','i','c','k','e','t'], StartIndex = 104},
        new WordTestObject{Chars = ['t','h','o','u','g','h'], StartIndex = 111},
        new WordTestObject{Chars = ['a','p','p','r','o','v','e'], StartIndex = 118},
        new WordTestObject{Chars = ['i','n','t','r','o','d','u','c','e'], StartIndex = 126},
        new WordTestObject{Chars = ['m','a','k','e'], StartIndex = 136}
    };
    private List<CharChecker> charsTypedList = new();
    private List<char> checkTestInstance = new();

    // Correct Status
    private List<bool?> correctStatus = new List<bool?>();
    private bool correct = false;

    // Key Counters
    private int excludedKeysPressed = 0;
    private int includedKeysPressed = 0;
    private int correctKeys = 0;

    // Other
    private int currIndex = 0;
    private bool isFocused = true;
    private char userLetter;
    private char currChar;
    private char prevChar;
    private ElementReference textInput;

    //Methods
    protected override void OnInitialized() 
    {
        ProcessCheckTestInstance();
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender) {
            await textInput.FocusAsync();
        }
    }
    private void OnInput(KeyboardEventArgs e)
    {
        Console.WriteLine("Current index: " + currIndex); 
        Console.WriteLine("Current character: " + currChar); 

        char lastTypedChar = e.Key.Length == 1 ? e.Key[0] : '\0';
        userLetter = lastTypedChar;

        // Keep count of non-alphabetical characters outside of space, shift, and backspace
        if (!letters.Contains(lastTypedChar) && lastTypedChar != '\b' && lastTypedChar != ' ' && !e.ShiftKey)
        {
            excludedKeysPressed++;
        }

        // Handle alphabetical keys & space
        else if(letters.Contains(lastTypedChar) || lastTypedChar == ' ')
        {
            includedKeysPressed++;

            if (currIndex < checkTestInstance.Count - 1)
            {
                currIndex++;
            }

            if (currIndex < correctStatus.Count)
            {
                if (currChar == '1' && lastTypedChar == ' ')
                {
                    correct = true;
                    correctKeys++;
                    correctStatus[currIndex - 1] = true;
                }
                else if (currChar == lastTypedChar)
                {
                    correct = true;
                    correctKeys++;
                    correctStatus[currIndex - 1] = true;
                }
                else
                {
                    correct = false;
                    correctStatus[currIndex - 1] = false;
                }
            }

        }
        
        GetNextChar();

    }
    private void GetNextChar()
    {
        if(letters.Contains(userLetter) || userLetter == ' ') 
        {
            charsTypedList.Add(new CharChecker{Letter = currChar, Time = 0, Correct = correct, PushedLetter = userLetter});
        }
        prevChar = currChar;
        currChar = checkTestInstance[includedKeysPressed];
    }

    private void ProcessCheckTestInstance() 
    {
        int totalLength = 0;
        foreach(WordTestObject testObj in testInstance) 
        {
            foreach(char word in testObj.Chars) 
            {
                checkTestInstance.Add(word);
                totalLength++;
            }
            checkTestInstance.Add('1');
            totalLength++;
        }
        correctStatus = new List<bool?>(Enumerable.Repeat((bool?)null, totalLength));
        //Check Test Instance
        //Console.WriteLine(String.Join(',',checkTestInstance));
        //Set currChar
        currChar = checkTestInstance[0];

    }

}