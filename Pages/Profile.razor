@using TypicalTypist.Services
@using TypicalTypist.Models

@page "/profile"

@inject UserService userService
@inject UserStatService userStatService
@inject IJSRuntime JSRuntime

@implements IAsyncDisposable

<PageTitle>Profile</PageTitle>

<div class="full-profile-page">

    @if(!firstView)
    {
    @* Basic Stat Section *@
    <div class="section-title">
        <span>@userService.activeUser.UserName</span>
        <span class="joined-text">Member Since @userService.activeUser.Joined.ToShortDateString()</span>
    </div>
    <div class="profile-bar">
        <div class="user-stat">
            <span class="opaque-text">Time Spent Typing</span><hr class="user-stat-hr"><span class="user-stat-lg-text">@GetTimeString()</span>
        </div>
        <div class="user-stat">
            <span class="opaque-text">Total Keys Typed</span><hr class="user-stat-hr"><span class="user-stat-lg-text">@userStats.CharsTyped</span>
        </div>
        <div class="user-stat">
            <span class="opaque-text">Average Accuracy</span><hr class="user-stat-hr"><span class="user-stat-lg-text">@userStats.Accuracy%</span>
        </div>
        <div class="user-stat">
            <span class="opaque-text">Average Speed (wpm)</span><hr class="user-stat-hr"><span class="user-stat-lg-text">@userStats.Wpm</span>
        </div>
        <div class="user-stat">
            <span class="opaque-text">Top Speed (wpm)</span><hr class="user-stat-hr"><span class="user-stat-lg-text">@userStats.TopWpm</span>
        </div>
    </div>

    @* Key Stat Section *@
    <div class="section-title">
        <span>
            Key Stats [<span class="key-selector" @onclick="ToggleKeyView">
                @if(viewLetters)
                {
                    <i class="bi bi-alphabet"></i>
                }
                else
                {
                    <i class="bi bi-123"></i>
                }
                </span>]
        </span>
    </div>
    <div class="profile-key-bar">
        @foreach(UserKeyStatDTO key in userKeyStats)
        {
            @if(viewLetters && lettersView.Contains(char.Parse(key.Key)))
            {
                <div class="user-key-stat">
                    <span class="opaque-text">
                        <u>@if(key.Key == " "){<span>&nbsp;</span>}@key.Key (@key.TotalTyped)</u>
                    </span>
                    <br>
                    <span class="user-key-stat-lg-text">
                        @key.Accuracy%<br>
                        @key.Speed<span> ms</span>
                    </span>
                </div>
            }
            else
            {
                @if(!viewLetters && symbolsView.Contains(char.Parse(key.Key)))
                {
                    <div class="user-key-stat">
                    <span class="opaque-text">
                        <u>@if(key.Key == " "){<span>&nbsp;</span>}@key.Key (@key.TotalTyped)</u>
                    </span>
                    <br>
                    <span class="user-key-stat-lg-text">
                        @key.Accuracy%<br>
                        @key.Speed<span> ms</span>
                    </span>
                </div>
                }
            }
        }
    </div>

    @* Bigraph Stat Section *@
    <div class="section-title">
        <span>Bigraph Stats [<span tabindex="0" data-bs-toggle="popover" data-bs-placement="top" data-bs-trigger="focus"
        data-bs-title="Choose Bigraph" class="bigraph-selector" data-bs-custom-class="custom-popover" 
        >
            @currentBigraph
        </span>]</span>
    </div>
    <div class="profile-key-bar">
        @foreach(UserBigraphStat bigraphStat in userBigraphStats)
        {
            @if(bigraphStat.StartingKey == currentBigraph || bigraphStat.Bigraph[1].ToString() == currentBigraph)
            {
                <div class="user-key-stat">
                    <span class="opaque-text">
                        @if(bigraphStat.Bigraph != bigraphStat.StartingKey + " " && bigraphStat.Bigraph != " " + bigraphStat.Bigraph[1])
                        {
                            <u>@bigraphStat.Bigraph (@bigraphStat.TotalTyped)</u>
                        }
                        else if(bigraphStat.Bigraph == bigraphStat.StartingKey + " ")
                        {
                            <u>@bigraphStat.StartingKey &nbsp;(@bigraphStat.TotalTyped)</u>
                        }
                        else
                        {
                            <u>&nbsp;@bigraphStat.Bigraph[1] (@bigraphStat.TotalTyped)</u>
                        }
                    </span>
                    <br>
                    <span class="user-key-stat-lg-text">
                        @bigraphStat.Accuracy%<br>
                        @bigraphStat.Speed<span> ms</span>
                    </span>
                </div>
            }
        }
    </div>

    @* Previous Tests Section *@
    <div class="tests-title">
        Previous Tests
    </div>
    <div class="prev-tests">
        <table class="test-table">
            <tr class="test-table-row-header">
                <th>Date</th>
                <th>Mode</th>
                <th>Char. Count</th>
                <th>Speed (wpm)</th>
                <th>Accuracy</th>
            </tr>
            <br>
            @for(int i = userTypingTests.Count - 1; i >= 0; i--)
            {
                <tr class="test-table-row">
                    <td>@userTypingTests[i].Date.ToShortDateString()</td>
                    <td>@userTypingTests[i].Mode</td>
                    <td>@userTypingTests[i].CharCount (@userTypingTests[i].IncorrectCount)</td>
                    <td>@userTypingTests[i].Speed</td>
                    <td>@userTypingTests[i].Accuracy%</td>
                </tr>
                <br>
            }
        </table>
    </div>
    }
    else
    {
        <div style="margin-bottom: 10rem;">
            Please come back here after completing your first test!
        </div>
    }

</div>

@code
{
    // Variables
    List<UserBigraphStat> userBigraphStats = new();
    List<UserKeyStatDTO> userKeyStats = new();
    List<UserTypingTestDTO> userTypingTests = new();
    UserStats userStats = new();
    private DotNetObjectReference<Profile>? _dotNetRef;
    string currentBigraph { get; set; } = "a";
    private bool viewLetters = true;
    private bool firstView = false;
    private HashSet<char> lettersView = new() {'a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'};
    private HashSet<char> symbolsView = new() {'1','2','3','4','5','6','7','8','9', '0', '.', ',', '\'', '"', '?', '!', '*', '=', '+', '-', '/', '\\', '<', 
                                              '>', '(', ')', '{', '}', '[', ']', '^', '~', '%', '$', '#', '@', '`', '&', '|', ' '};

    // Methods
    protected async override Task OnInitializedAsync()
    {
        try
        {
            userStats = await userStatService.GetStats(userService.activeUser.UserId);
            userKeyStats = await userStatService.GetKeyStats(userService.activeUser.UserId);
            userTypingTests = await userStatService.GetPreviousTests(userService.activeUser.UserId);
            userBigraphStats = await userStatService.GetBigraphStats(userService.activeUser.UserId);
        }
        catch
        {
            firstView = true;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _dotNetRef = DotNetObjectReference.Create(this);
            await JSRuntime.InvokeVoidAsync("registerProfilePage", _dotNetRef);
            await JSRuntime.InvokeVoidAsync("initializePopover");
        }
    }

    public ValueTask DisposeAsync()
    {
        if (_dotNetRef is not null)
        {
            _dotNetRef.Dispose();
        }
        return ValueTask.CompletedTask;
    }

    [JSInvokable]
    public void HandlePopoverOption(string option)
    {
       currentBigraph = option;
       StateHasChanged();
    }

    private string GetTimeString()
    {
        if(userStats.TimeTyped < 60)
        {
            return userStats.TimeTyped + "s";
        }
        else if(userStats.TimeTyped < 3600)
        {
            return (userStats.TimeTyped / 60) + "m " + (userStats.TimeTyped % 60) + "s";
        }
        else 
        {
            string hours = (userStats.TimeTyped / 3600) + "h ";
            string minutes = (userStats.TimeTyped % 3600 / 60) + "m ";
            string seconds = (userStats.TimeTyped % 3600 % 60) + "s";

            return hours + minutes + seconds;
        }
    }
    private void ToggleKeyView()
    {
        viewLetters = !viewLetters;
        StateHasChanged();
    }
}