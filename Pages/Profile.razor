@using TypicalTypist.Services
@using TypicalTypist.Models

@page "/profile"

@inject UserService userService
@inject UserStatService userStatService
@inject IJSRuntime JSRuntime

@implements IAsyncDisposable

<PageTitle>Profile</PageTitle>

<div class="full-profile-page">

    @* Basic Stat Section *@
    <div class="section-title">
        User Stats
    </div>
    <div class="profile-bar">
        <div class="user-stat">
            <span class="user-username">@userService.activeUser.UserName</span>
            <br>
            <span class="joined-text">Joined @userService.activeUser.Joined.ToShortDateString()</span>
        </div>
        <div class="user-stat">
            <span class="opaque-text">Time Spent Typing</span><hr class="user-stat-hr"><span class="user-stat-lg-text">@userStats.TimeTyped</span>
        </div>
        <div class="user-stat">
            <span class="opaque-text">Total Keys Typed</span><hr class="user-stat-hr"><span class="user-stat-lg-text">@userStats.CharsTyped</span>
        </div>
        <div class="user-stat">
            <span class="opaque-text">Average Accuracy</span><hr class="user-stat-hr"><span class="user-stat-lg-text">@userStats.Accuracy%</span>
        </div>
        <div class="user-stat">
            <span class="opaque-text">Average Speed (wpm)</span><hr class="user-stat-hr"><span class="user-stat-lg-text">@userStats.Wpm</span>
        </div>
        <div class="user-stat">
            <span class="opaque-text">Top Speed (wpm)</span><hr class="user-stat-hr"><span class="user-stat-lg-text">@userStats.TopWpm</span>
        </div>
    </div>

    @* Key Stat Section *@
    <div class="section-title">
        Key Stats
    </div>
    <div class="profile-key-bar">
        @foreach(UserKeyStatDTO key in userKeyStats)
        {
            <div class="user-key-stat">
                <span class="opaque-text">
                    <u>@if(key.Key == " "){<span>&nbsp;</span>}@key.Key (@key.TotalTyped)</u>
                </span>
                <br>
                <span class="user-stat-lg-text">
                    @key.Accuracy%<br>
                    @key.Speed<span> ms</span>
                </span>
            </div>
        }
    </div>

    @* Bigraph Stat Section *@
    <div class="section-title">
        Bigraph Stats [<span data-bs-toggle="popover" data-bs-placement="top" data-bs-trigger="click"
        data-bs-title="Choose Bigraph" class="bigraph-selector" data-bs-custom-class="custom-popover" 
        data-bs-html="true">
            @currentBigraph
        </span>]
    </div>
    <div class="profile-key-bar">
        @foreach(UserBigraphStat bigraphStat in userBigraphStats)
        {
            @if(bigraphStat.StartingKey == currentBigraph || bigraphStat.Bigraph[1].ToString() == currentBigraph)
            {
                <div class="user-key-stat">
                    <span class="opaque-text">
                        @if(bigraphStat.Bigraph != bigraphStat.StartingKey + " " && bigraphStat.Bigraph != " " + bigraphStat.Bigraph[1])
                        {
                            <u>@bigraphStat.Bigraph (@bigraphStat.TotalTyped)</u>
                        }
                        else if(bigraphStat.Bigraph == bigraphStat.StartingKey + " ")
                        {
                            <u>@bigraphStat.StartingKey &nbsp;(@bigraphStat.TotalTyped)</u>
                        }
                        else
                        {
                            <u>&nbsp;@bigraphStat.Bigraph[1] (@bigraphStat.TotalTyped)</u>
                        }
                    </span>
                    <br>
                    <span class="user-stat-lg-text">
                        @bigraphStat.Accuracy%<br>
                        @bigraphStat.Speed<span> ms</span>
                    </span>
                </div>
            }
        }
    </div>

    @* Previous Tests Section *@
    <div class="section-title">
        Previous Tests
    </div>
    <div class="prev-tests">
        <table class="test-table">
            <tr class="test-table-row-header">
                <th>Date</th>
                <th>Mode</th>
                <th>Char. Count</th>
                <th>Speed (wpm)</th>
                <th>Accuracy</th>
            </tr>
            <br>
            @foreach(UserTypingTestDTO test in userTypingTests)
            {
                <tr class="test-table-row">
                    <td>@test.Date.ToShortDateString()</td>
                    <td>@test.Mode</td>
                    <td>@test.CharCount (@test.IncorrectCount)</td>
                    <td>@test.Speed</td>
                    <td>@test.Accuracy%</td>
                </tr>
                <br>
            }
        </table>
    </div>

</div>

@code
{
    //Variables
    List<UserBigraphStat> userBigraphStats = new();
    List<UserKeyStatDTO> userKeyStats = new();
    List<UserTypingTestDTO> userTypingTests = new();
    UserStats userStats = new();
    private DotNetObjectReference<Profile>? _dotNetRef;
    string currentBigraph { get; set; } = "a";
    protected async override Task OnInitializedAsync()
    {
        userStats = await userStatService.GetStats(userService.activeUser.UserId);
        userKeyStats = await userStatService.GetKeyStats(userService.activeUser.UserId);
        userTypingTests = await userStatService.GetPreviousTests(userService.activeUser.UserId);
        userBigraphStats = await userStatService.GetBigraphStats(userService.activeUser.UserId);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _dotNetRef = DotNetObjectReference.Create(this);
            await JSRuntime.InvokeVoidAsync("registerProfilePage", _dotNetRef);
            await JSRuntime.InvokeVoidAsync("initializePopover");
        }
    }

    public ValueTask DisposeAsync()
    {
        if (_dotNetRef is not null)
        {
            _dotNetRef.Dispose();
        }
        return ValueTask.CompletedTask;
    }

    [JSInvokable]
    public void HandlePopoverOption(string option)
    {
       currentBigraph = option;
       StateHasChanged();
       Console.WriteLine("The current bigraph is " + currentBigraph); 
    }
}