@using TypicalTypist.Models
@using TypicalTypist.Services

@page "/Login"

@inject UserService userService
@inject NavigationManager navManager

<PageTitle>Login</PageTitle>

<div class="full-page-container">

    <EditForm Model="@loginModel" OnValidSubmit="UserLogin" class="centered-forms">

        @if(errorMessage != "")
        {
            <div style="color:red; margin-bottom: 1rem;">
                &#x2022; @errorMessage
            </div>
        }
        <div class="form-header">
            Login <i class="bi bi-box-arrow-in-left"></i>
        </div>

        <div class="form-input">
            <input placeholder="Username" type="text" class="form-control" @bind-value="loginModel.Username" />
        </div>

        <div class="form-input">
            <input placeholder="Password" type="password" class="form-control" @bind-value="loginModel.Password" />
        </div>

        <button type="submit" class="btn btn-outline-secondary" style="color: lightgray; margin-top: 16px">Login</button>

    </EditForm>

</div>

@code {

    private LoginModel loginModel = new();
    private string errorMessage = "";

    // Methods
    private async void UserLogin() 
    {
        try
        {
            UserDTO result =  await userService.LoginAsync(loginModel);
            userService.activeUser = result;
            userService.IsLoggedIn = true;
            this.loginModel = new LoginModel();
            
        }
        catch(Exception ex)
        {
            errorMessage = ex.Message;
        }

        StateHasChanged();
        
        if(userService.IsLoggedIn)
        {
            navManager.NavigateTo("/");
        }
    }
    
}

